CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C* THIS ROUTINE COMPUTES A TWO-CENTER HYBRID INTEGRAL USING SLATER   *C
C* ORBITALS AND GIVEN THE REQUIRED RADIAL INTEGRALS STORED IN RADAR  *C
C* ARRAY.                                                            *C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      SUBROUTINE HYBRD(N1,L1,M1, N2,L2,M2, N3,L3,M3, N4,L4,M4, ZETA1,
     $     ZETA2,ZETA3,ZETA4, AB,YLMAB,PHIAB, ARGNT1,ARGNT2, RADAR, HYB)

      IMPLICIT REAL*8 (A-H, O-Z)
      INCLUDE "../lib95/SIZE.INCL"
      INCLUDE "../lib95/CONST.INCL"

      DIMENSION YLMAB(0:*), ARGNT1(*), ARGNT2(*), RADAR(*),
     $      ARGNT3(L1MAX+1), ARGNT4((L1MAX+L2MAX+1)), INX(7)

      COMMON/FACT0/FACT(0:30)
      COMMON/DFACT/DFAC(0:100)


C.... THE NORMALIZATION CONSTANTS

      A12 = ANP(ZETA1,ZETA2,N1,N2)
      A34 = ANP(ZETA3,ZETA4,N3,N4)
c       A1 = (2.d0*ZETA1)**N1 * DSQRT((2.D0*ZETA1)/FACT(2*N1))
c       A2 = (2.d0*ZETA2)**N2 * DSQRT((2.D0*ZETA2)/FACT(2*N2))
c       A3 = (2.d0*ZETA3)**N3 * DSQRT((2.D0*ZETA3)/FACT(2*N3))
c       A4 = (2.d0*ZETA4)**N4 * DSQRT((2.D0*ZETA4)/FACT(2*N4))
      AP1 = A12*A34

c       CSTE =  DFAC(L3)*DFAC(L4) * AP1*
c      A1 = (2.D0*ZETA1)**N1 * DSQRT((2.D0*ZETA1)/FACT(2*N1))
c      A2 = (2.D0*ZETA2)**N2 * DSQRT((2.D0*ZETA2)/FACT(2*N2))
c      A3 = (2.D0*ZETA3)**N3 * DSQRT((2.D0*ZETA3)/FACT(2*N3))
c      A4 = (2.D0*ZETA4)**N4 * DSQRT((2.D0*ZETA4)/FACT(2*N4))

c      CSTE = 64.D0 * PI3 * A1 * A2 * A3 * A4 * DFAC(L4) * (-AB)**L4
      CSTE = 64.D0 * PI3 * AP1  * DFAC(L4) * (-AB)**L4

C.... GLOBAL AZIMUTHAL ANGLE
C
C     ANGLE  = ((M4-M3)+(M2-M1))*PHIAB
C     COSINE = DCOS(ANGLE)
C
C.... INITIALIZATION OF THE INDEXING ARRAY

      CALL RAZ1(INX, 1, 4)

      HYB = 0.D0

C.... THE COMPUTATION

      CALL GAUNT(L2,M2, L1,M1, LMIN,LMAX,M12, NGAUNT, ARGNT3)

      K1 = 1

      DO 5 L=IABS(L1-L2), L1+L2, 2
       INX(1) = INX(1) + INX(2) + INX(3) + INX(4)
       CALL RAZ1(INX, 2, 4)
       IF(L .GE. LMIN)THEN
	AUX1 = ARGNT3(K1)/DBLE(L+L+1)
	K1   = K1+1
       ELSE
	AUX1 = 0.D0
       ENDIF

       K2 = 1
       K3 = 1

      DO 5 LP4=0, L4
       INX(2) = INX(2) + INX(3) + INX(4)
       MAXMP4 = MAX(-LP4, -L4+LP4+M4)
       MINMP4 = MIN( LP4,  L4-LP4+M4)
ccc    IF(MINMP4 .LT. MAXMP4)THEN
ccc     WRITE(*, *)'HYBRD : MAXMP4 ET MINMP4 '
ccc     STOP
ccc    ENDIF
      DO 5 MP4=MAX(-LP4, -L4+LP4+M4), MIN(LP4, L4-LP4+M4)
       CALL RAZ1(INX, 3, 4)
       AUX2 = ARGNT1(K2)
       K2   = K2 + 1
      DO 5 LP34=IABS(L3-LP4), L3+LP4, 2
       INX(3) = INX(3) + INX(4)
       CALL RAZ1(INX, 4, 4)
       AUX3 = ARGNT2(K3)
       K3   = K3 + 1
       IF(AUX1*AUX3 .NE. 0.D0)THEN
	CALL GAUNT(LP34,MP4-M3, L,M12, LMIN1,LMAX1,M34, NGAUNT, ARGNT4)
       ENDIF
       K4 = 1
      DO 5 LMD=IABS(L-LP34), L+LP34, 2
       INX(4) = INX(4) + 1
       IF(LMD .GE. LMIN1)THEN
	NYL  = (LMD*(LMD+1))/2 + IABS((M1-M2)-(MP4-M3))
	MUPW = ((M1-M2)-(MP4-M3) - IABS((M1-M2)-(MP4-M3)))/2
	AUX4 = (-1)**MUPW * ARGNT4(K4) * YLMAB(NYL)
	K4   = K4 + 1
       ELSE
	AUX4 = 0.D0
       ENDIF

       INDIC = INX(1) + INX(2) + INX(3) + INX(4)
       HYB = HYB + AUX1*AUX2*AUX3*AUX4*RADAR(INDIC)

 5    CONTINUE

      HYB = CSTE/DSQRT(AB) * HYB

      RETURN
      END
